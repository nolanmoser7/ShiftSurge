Auth model (simple & safe)

Superadmin signs in via a separate admin login (email+password or magic link).

On successful admin login, create a server-side session cookie (HttpOnly, Secure, SameSite=Lax) scoped to /admin.

Add an RBAC claim app_role=superadmin to the session (server-kept).

All /admin/* routes must verify the cookie server-side before rendering or performing actions.

Data model (create if missing)

public.orgs(id uuid pk, name text, created_at timestamptz)

public.users_meta(user_id uuid pk references auth.users(id), display_name text, org_id uuid null, created_at timestamptz)

public.audit_logs(id bigserial pk, actor uuid null, action text, subject text, details jsonb, created_at timestamptz default now())

Log every superadmin action here from the server.

RLS expectations

Keep strict RLS for normal tables.

Superadmin bypasses RLS only via server code that uses SUPABASE_SERVICE_ROLE_KEY.

Client (browser) never receives the service key.

Admin capabilities (MVP)

Overview

Metrics: total users, active users (last 30d), org count, storage usage (basic), recent errors/logs.

User management

Search users by email/id.

View user profile (auth.users + users_meta).

Impersonate user (server issues a short-lived session cookie for testing; clearly flagged “Impersonating”).

Disable/enable user, force password reset (via Supabase admin API).

Org & membership

CRUD orgs.

Assign/remove users to orgs; set role (owner, admin, member).

Content/data tools

Read-only table browsers (paginated) for key tables (projects, items, etc.).

Safe bulk actions (e.g., archive old rows) executed via server with dry-run & confirm step.

Policies & config (read-only MVP)

Display which tables have RLS enabled and list policy names (read-only in UI).

Feature flags (optional)

Table public.feature_flags(key text pk, enabled boolean, payload jsonb).

Toggle flags (server-side write).

Audit trail

Every admin action inserts a row into audit_logs with { actor, action, subject, details }.

Security requirements

Never send SUPABASE_SERVICE_ROLE_KEY to the browser.

All /admin/* pages are server-rendered or fetch from server routes that check the admin session.

Add simple IP allowlist support (env var ADMIN_IP_ALLOWLIST = comma-separated CIDRs). If set, block non-matching IPs.

2FA optional: allow TOTP setup for superadmin account(s) and require on login if enabled.

Set robust HTTP headers: Content-Security-Policy (self, disallow inline), X-Frame-Options: DENY, Referrer-Policy: strict-origin-when-cross-origin.

Server utilities (implement)

getAdminClient() → Supabase client using SUPABASE_SERVICE_ROLE_KEY.

requireAdmin(req,res,next) → verifies admin cookie + optional IP allowlist; else 401/403.

logAdmin(actor_id, action, subject, details) → inserts into audit_logs.

Routes (suggested)

GET /admin/login (render form)

POST /admin/login (verify credentials via Supabase Auth admin; set cookie)

POST /admin/logout (clear cookie)

GET /admin (dashboard metrics)

GET /admin/users?query=...

GET /admin/users/:id

POST /admin/users/:id/disable

POST /admin/users/:id/impersonate

GET /admin/orgs / POST /admin/orgs / PATCH /admin/orgs/:id

GET /admin/policies (read-only snapshot)

GET /admin/logs (audit log list, paginated)

UI (basic but clear)

Left nav: Dashboard, Users, Orgs, Data, Policies, Logs.

Top bar: “Impersonating: <email>” banner if active + “Stop Impersonation”.

Tables: server-paginated, search/filter, export CSV (server generates).

Non-functional

No blocking long tasks: for bulk ops, queue with a “job started” UI and status polling (basic in-memory queue is fine to start).

Errors: show friendly messages; log full details to audit_logs / server console.

Tests: add a tiny smoke test to assert /admin returns 200 when authenticated and 403 otherwise.

Acceptance criteria

Admin login works; cookie is HttpOnly & Secure.

Normal users cannot access /admin/*.

Admin can list/search users and toggle a user’s active state.

Admin actions appear in audit_logs with timestamp + actor.

Service role key is only used on the server; never appears in client code or responses.

Deliverables

Minimal server (server.ts/index.ts) + routes.

Minimal frontend for /admin (SSR or React), with forms and tables.

SQL migration (or setup script) to create audit_logs, users_meta, feature_flags (optional), plus any helper indexes.

Readme with env vars: SUPABASE_URL, SUPABASE_ANON_KEY, SUPABASE_SERVICE_ROLE_KEY, ADMIN_IP_ALLOWLIST (optional).